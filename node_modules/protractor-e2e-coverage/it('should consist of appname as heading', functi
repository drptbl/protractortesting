 it('should consist of appname as heading', function() {
    element(by.css('.text-muted')).getText().then(function(name) {
	  expect(name).toBe('myNgApp');
	});
  }); 
 
  it('should consist of 3 menu items', function() {
    var list = element.all(by.css('.nav li'));
	expect(list.count()).toBe(3);
  }); 


  browser.manage().window().setSize(640, 1024);


  tobedisplayedandpresent

        it('should close cookie frame after acceptation', function() {
            loginPage.cookieAcceptButton().click().then(function() {
            browser.sleep(100);
            expect(loginPage.cookieFrame().isPresent()).toBeFalsy();
            });



Keeping things compatible with all browser drivers and both appium and Selenium can sometimes become difficult, one example in our case was clicking and dragging. The recommended method is as follows:
//Click and drag can either be done using dragAndDrop()
browser.actions().dragAndDrop(element.find(), { x: 50, y: 50 }).perform();
view rawactionSequence.js hosted with ❤ by GitHub
Unfortunately, action sequences are currently unsupported by appium, which is used to run most of the mobile tests on Sauce Labs. There’s no pretty way around this so we ended up injecting a script into the browser that generates the requisite events:
//This script is a slightly modified version of http://ynot408.wordpress.com/category/selenium/
clickAndDragScript = "function simulate(f,c,d,e){var b,a=null;for(b in eventMatchers)if(eventMatchers[b].test(c)){a=b;break}if(!a)return!1;document.createEvent?(b=document.createEvent(a),a==\"HTMLEvents\"?b.initEvent(c,!0,!0):b.initMouseEvent(c,!0,!0,document.defaultView,0,d,e,d,e,!1,!1,!1,!1,0,null),f.dispatchEvent(b)):(a=document.createEventObject(),a.detail=0,a.screenX=d,a.screenY=e,a.clientX=d,a.clientY=e,a.ctrlKey=!1,a.altKey=!1,a.shiftKey=!1,a.metaKey=!1,a.button=1,f.fireEvent(\"on\"+c,a));return!0} var eventMatchers={HTMLEvents:/^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,MouseEvents:/^(?:click|dblclick|mouse(?:down|up|over|move|out))$/}; " + "simulate(arguments[0],\"mousedown\",arguments[3],arguments[4]); simulate(arguments[0],\"mousemove\",arguments[1],arguments[2]); simulate(arguments[0],\"mouseup\",arguments[1],arguments[2]); ";

//Execute the script in the browser
browser.executeScript(clickAndDragScript,toDrag.find(),xto,yto, res.x, res.y)
view rawdragScript.js hosted with ❤ by GitHub
